bool WordCompleter::eventFilter(QObject *o, QEvent *e)
{
if(widget()->inherits("QTextEdit") && e->type() == QEvent::KeyPress){
            QKeyEvent* ke = static_cast<QKeyEvent*>(e);
            switch (ke->key()) {
            case Qt::Key_Space:

                if(ke->modifiers().testFlag(Qt::ControlModifier)){
                    QTextEdit* textEdit = qobject_cast<QTextEdit*>(widget());
                    QTextCursor textCursor = textEdit->textCursor();
                    textCursor.movePosition(QTextCursor::StartOfWord, QTextCursor::KeepAnchor);
                    if(textCursor.selectedText().length() >= minCompletionPrefixLength){
                        setCompletionPrefix(textCursor.selectedText());
                        QRect rect = QRect(textEdit->cursorRect().bottomLeft(),QSize(100,5));
                        complete(rect);
                    }

                    return true;
                }else{
                    if(popup()->isVisible()){
                        popup()->hide();
                        if (popup()->currentIndex().isValid()){
                            emit activated(popup()->currentIndex());
                            emit activated(popup()->currentIndex().data(completionRole()).toString());
                        }
                        return true;
                    }
                }

                break;

            case Qt::Key_Return:
            case Qt::Key_Enter:
            case Qt::Key_Tab:
            {
                if(popup()->isVisible()){
                    popup()->hide();
                    if (popup()->currentIndex().isValid()){
                        emit activated(popup()->currentIndex());
                        emit activated(popup()->currentIndex().data(completionRole()).toString());
                    }
                    return true;
                }
            }
            case Qt::Key_Escape:
                if(popup()->isVisible()){
                    popup()->hide();
                    return true;
                }
            default:
            {
                QTextEdit* textEdit = qobject_cast<QTextEdit*>(widget());
                QTextCursor textCursor = textEdit->textCursor();
                textCursor.movePosition(QTextCursor::StartOfWord, QTextCursor::KeepAnchor);
                if(textCursor.selectedText().length() >= minCompletionPrefixLength){
                    setCompletionPrefix(textCursor.selectedText());
                    QRect rect = QRect(textEdit->cursorRect().bottomLeft(),QSize(100,5));
                    complete(rect);
                }
                break;
            }
}
        }
        return QCompleter::eventFilter(o,e);
}
